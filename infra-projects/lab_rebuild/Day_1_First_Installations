# Day 1 - Home Server  & Cyber Range Lab Deployment   
**Author:** Ty  
**Date:** October 2025  

## Project Overview
​Project Nyxline is the long-term initiative to build a robust, self-contained, and enterprise-simulating home infrastructure and offensive security training range.

​Day 1 focused on deploying NoctHaven, the primary Proxmox Virtual Environment (PVE) node, and the RedShift Lab VM. This establishes a separation between critical family media/cloud services and a dedicated, intentionally vulnerable environment for defensive and offensive security practice.

## ​Core Objectives Achieved
1. ​Proxmox VE Foundation: Established a stable, bare-metal hypervisor on NoctHaven.
2. ​Service Deployment: Containerized services (Nextcloud, Jellyfin, Portainer) are running via Docker Compose on a dedicated Ubuntu VM.
3. ​Cyber Range Isolation: Deployed the RedShift Lab VM with initial vulnerable applications, preparing for future VLAN segmentation and offensive tool testing.

## Hardware Inventory (Current & Planned)

### Hosts

#### ​NoctHaven (Primary Host)
|Setting |Description|Role|Status|
|---|---|---|---|
|Model|Del OptiPlex 5050 SFF | Hypervisor / Critical Services |  Active |
| CPU | Intel Core i5-7500 (4C/4T) | Core Processing (QuickSync available)|Stable|
| RAM | 16  GB DDR4 | Will be maxed for current critical I/O/caching demands | Stable |
| Primary Storage | 256 GB SSD | Proxmox OS & VM/Container Storage | active |
 Secondary Storage | 1 TB SSD | Photo and Media Storage | Planned |

Note: Uses Intel QuickSync for transcoding
Yaml
```yaml
services:
  db:
    image: mariadb:10.11
    container_name: nextcloud-db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --log-bin=binlog --expire-logs-days=7
    environment:
      MYSQL_ROOT_PASSWORD: 'Redacted For Public Repo'
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: Redacted For Public Repo
      MYSQL_PASSWORD: 'Redacted For Public Repo'
    volumes:
      - /mnt/dockerdata/mariadb:/var/lib/mysql


  nextcloud:
    image: nextcloud:apache
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8080:80"
    environment:
      MYSQL_HOST: db
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: Redacted For Public Repo
      MYSQL_PASSWORD: 'Redacted For Public Repo
    volumes:
      - /mnt/dockerdata/nextcloud/html:/var/www/html
      - /mnt/dockerdata/nextcloud/config:/var/www/html/config
      - /mnt/dockerdata/nextcloud/data:/var/www/html/data

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      WEBSOCKET_ENABLED: "false"
      ADMIN_TOKEN: 'Redacted For Public Repo'
    ports:
      - "8081:80"
    volumes:
      - /mnt/dockerdata/vaultwarden:/data


  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "8096:8096"
    volumes:
      - /mnt/dockerdata/jellyfin/config:/config
      - /mnt/dockerdata/jellyfin/cache:/cache
      - /mnt/dockerdata/jellyfin/media:/media


  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/dockerdata/portainer:/data


  homer:
    image: b4bz/homer:latest
    container_name: homer
    volumes:
      - /opt/homer/assets:/www/assets
    ports:
      - "8000:8000"
    restart: unless-stopped
```


#### RedShift (Lab VM) Configuration
​This VM operates on  seperate machine apart from NoctHaven, and hosts the primary security range.

| Setting | Value | Role | Notes |
|---|---|---|---|
| OS | Ubuntu Server 24.04 LTS | Docker Host| Bare minimum install |
| vCPUs | 3 | Performance for vulnerable stacks | Adequate for testing |
| RAM | 8 GB | Dedicated for lab workloads | Adequate for testing |
| Disk | 120 GB (Thin Provisioned) | Lab Data & Logs | Isolated network planned |


#### Vulnerable Lab Stack
​The RedShift Lab VM is populated with foundational training applications, all containerized via Docker Compose and segmented by internal Docker networking to simulate service isolation.

Application Framework Purpose Status
DVWA PHP/MySQL Classic platform for basic web exploitation Deployed
OWASP Juice Shop Node.js Advanced training for OWASP Top 10 vulnerabilities Deployed
WebGoat Java (Spring Boot) Hands-on secure coding and injection training Deployed
Kali Linux N/A Dedicated Offensive Security OS Pending VM Import
Cowrie Python Low-interaction SSH/Telnet Honeypot Planned (Post VLAN)

Docker Compose for the initial three lab VMs is
```yml
services:
  dvwa:
    image: vulnerables/web-dvwa
    container_name: dvwa
    restart: unless-stopped
    ports:
      - "1000:80"
    cap_add:
      - NET_ADMIN

  juiceshop:
    image: bkimminich/juice-shop
    container_name: juiceshop
    restart: unless-stopped
    ports:
      - "1001:3000"

  webgoat:
    image: webgoat/webgoat-8.0
    container_name: webgoat
    restart: unless-stopped
    ports:
      - "1002:8080"
```

## Setup and Configuration

### Proxmox VE Installation
1. Created new VM template from Ubuntu Server.
2. Updated and upgraded base server OS

### Nocthaven VM Deployment
1. Created new VM template from Ubuntu Server.  
2. Allocated 3 cores, 14 GB RAM, 120 GB disk.  
3. Installed Docker and Docker Compose.  
4. Deployed Home applications stack (see above). 

### Lab VM Deployment
1. Created new VM template from Ubuntu Server.  
2. Allocated 3 cores, 8 GB RAM, 120 GB disk.  
3. Installed Docker and Docker Compose.  
4. Deployed vulnerable applications stack (see above).  

## Security Maturation & DevOps Roadmap

1. ​A critical immediate security improvement is the transition from plaintext credentials to proper environment management.
​Password Migration Plan: YAML → .env
2. ​Current configuration files store secrets in YAML. This practice poses a high exposure risk. The immediate action is to adopt a dynamic, environment-based secrets workflow.

### ​Action Plan:
1. ​Create separate .env files for Proxmox, Lab VM, and Docker environments.
2. ​Implement environment variable loading for dynamic secrets across all scripts and docker-compose.yml files.
3. Plaintext credentials currently exist in multiple Docker Compose YAML files.
This plan transitions secrets to .env files with proper permission hardening.

Action Steps:
- Create per-environment .env files:
prod.env, lab.env, soc.env
- Reference environment variables in YAML:
password: ${DB_PASSWORD}
- Update .gitignore to exclude .env files.
- Store master .env backup in Vaultwarden.
- Evaluate migration to HashiCorp Vault for full secret lifecycle management.

### ​Infrastructure Expansion: Multi-Node Cluster
​The next phase moves from a single-node hypervisor to a fault-tolerant, four-node cluster integration with dedicated networking, backup, and automation nodes.

| Node | Model | Core Role | Key Applications |
|---|---|---|---|
| Node 1 (NoctHaven) | OptiPlex 5050 | Media / Cloud | Jellyfin, Nextcloud, Vaultwarden, Immich  |
| Node 2 | EliteDesk 705 G4 | Network Access / Infrastructure | Ansible, Traefik, AdGuard Home, Prometheus |
| Node 3 | EliteDesk 705 G4 | Logging / Backup / Sync | Proxmox Backup Server, Loki, Promtail, Syncthing |
| Node 4 | EliteDesk 705 G4 | Home Automation & Aux | Home Assistant, Mealie, CUPS |

[Full RedShift Lab Infrastructure Details](https://github.com/5280Ty/redshift-labs/blob/main/infra-projects/lab_rebuild/Software%20Stack)


## Lessons Learned
1. Bare metal Proxmox delivers measurable performance gains over nested virtualization.
2. Credential management must be treated as part of security hygiene even in lab settings.
3. Network segmentation prevents accidents; VLAN isolation is non-negotiable.
4. Documentation discipline saves hours of rework later.
5. Containers need governance—without proper .env and secrets handling, risk creeps in fast.


## Next Steps
1. ​Expand NoctHaven storage and RAM.
2. ​Build out Node 2 to begin testing multi-node Proxmox functionality.
3. ​Fully migrate all existing service secrets using the .env methodology, starting with Vaultwarden.
4. ​Procure and configure the OPNsense router replacement.
5. ​Begin standing up the SOC Node (Security Onion).
6. ​The current SOHO router will be replaced with a dedicated firewall distribution to enable critical features:
​OPNsense / pfSense: For secure, granular VLAN routing and firewall rules.


# Full technical notes coming soon
---

Environment: Project Nyxline Homelab  
Report: NoctHaven & RedShift Deployment  
Author: Ty  



